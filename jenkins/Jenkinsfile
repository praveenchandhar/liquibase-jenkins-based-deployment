pipeline {
    agent any
    
    parameters {
        string(
            name: 'BRANCH_OR_TAG', 
            defaultValue: '', 
            description: 'Branch or tag name containing the changesets to deploy'
        )
        choice(
            name: 'LIQUIBASE_ACTION', 
            choices: ['status', 'update', 'rollback'], 
            description: 'Liquibase action to perform'
        )
        choice(
            name: 'ROLLBACK_COUNT', 
            choices: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], 
            description: 'Number of changesets to rollback (only for rollback action)'
        )
    }
    
    environment {
        MONGO_CONNECTION_BASE = "mongodb+srv://praveenchandharts:kixIUsDWGd3n6w5S@praveen-mongodb-github.lhhwdqa.mongodb.net"
        LIQUIBASE_VERSION = "4.31.1"
        JARS_DIR = "${WORKSPACE}/liquibase-jars"
        REPO_URL = "https://github.com/praveenchandhar/liquibase-jenkins-based-deployment.git"
    }
    
    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (!params.BRANCH_OR_TAG) {
                        error("BRANCH_OR_TAG parameter is required")
                    }
                    
                    echo "🔍 Deployment Parameters:"
                    echo "   Branch/Tag: ${params.BRANCH_OR_TAG}"
                    echo "   Action: ${params.LIQUIBASE_ACTION}"
                    if (params.LIQUIBASE_ACTION == 'rollback') {
                        echo "   Rollback Count: ${params.ROLLBACK_COUNT}"
                    }
                }
            }
        }
        
        stage('Checkout Repository') {
            steps {
                script {
                    echo "📥 Checking out: ${params.BRANCH_OR_TAG}"
                    
                    deleteDir()
                    
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${params.BRANCH_OR_TAG}"]],
                        userRemoteConfigs: [[
                            url: "${env.REPO_URL}",
                            credentialsId: 'github-credentials'
                        ]]
                    ])
                    
                    sh '''
                        echo "✅ Repository checked out successfully"
                        echo "📁 Current directory: $(pwd)"
                        echo "🌿 Current branch/tag: $(git describe --always --tags 2>/dev/null || echo 'unknown')"
                        echo "📊 Latest commit: $(git log -1 --oneline 2>/dev/null || echo 'unknown')"
                    '''
                }
            }
        }
        
        stage('Setup Liquibase Environment') {
            steps {
                script {
                    echo "🔧 Setting up Liquibase environment..."
                    
                    sh '''
                        mkdir -p ${JARS_DIR}
                        
                        # Download Liquibase CLI if not exists
                        if [ ! -f "${WORKSPACE}/liquibase" ]; then
                            echo "📥 Downloading Liquibase CLI ${LIQUIBASE_VERSION}..."
                            curl -L -o liquibase-${LIQUIBASE_VERSION}.zip https://github.com/liquibase/liquibase/releases/download/v${LIQUIBASE_VERSION}/liquibase-${LIQUIBASE_VERSION}.zip
                            unzip liquibase-${LIQUIBASE_VERSION}.zip
                            chmod +x liquibase
                            mv liquibase ${WORKSPACE}/liquibase
                            export PATH="${WORKSPACE}:$PATH"
                            echo "Liquibase installed at: ${WORKSPACE}/liquibase"
                        else
                            echo "✅ Liquibase already installed"
                        fi
                        
                        # Verify installation
                        export PATH="${WORKSPACE}:$PATH"
                        ${WORKSPACE}/liquibase --version
                    '''
                }
            }
        }
        
        stage('Download Dependencies') {
            steps {
                script {
                    echo "📦 Downloading Liquibase dependencies..."
                    
                    sh '''
                        # Check if dependencies already exist
                        if [ ! -f "${JARS_DIR}/liquibase-mongodb.jar" ]; then
                            echo "📥 Downloading dependencies..."
                            
                            # MongoDB JARs
                            curl -L -o ${JARS_DIR}/mongodb-driver-core.jar https://repo1.maven.org/maven2/org/mongodb/mongodb-driver-core/5.5.0/mongodb-driver-core-5.5.0.jar
                            curl -L -o ${JARS_DIR}/mongodb-driver-sync.jar https://repo1.maven.org/maven2/org/mongodb/mongodb-driver-sync/5.5.0/mongodb-driver-sync-5.5.0.jar
                            curl -L -o ${JARS_DIR}/bson.jar https://repo1.maven.org/maven2/org/mongodb/bson/5.5.0/bson-5.5.0.jar

                            # Liquibase Core
                            curl -L -o ${JARS_DIR}/liquibase-core.jar https://repo1.maven.org/maven2/org/liquibase/liquibase-core/${LIQUIBASE_VERSION}/liquibase-core-${LIQUIBASE_VERSION}.jar

                            # Liquibase MongoDB Extension
                            curl -L -o ${JARS_DIR}/liquibase-mongodb.jar https://repo1.maven.org/maven2/org/liquibase/ext/liquibase-mongodb/${LIQUIBASE_VERSION}/liquibase-mongodb-${LIQUIBASE_VERSION}.jar

                            # Additional Dependencies
                            curl -L -o ${JARS_DIR}/commons-io.jar https://repo1.maven.org/maven2/commons-io/commons-io/2.13.0/commons-io-2.13.0.jar
                            curl -L -o ${JARS_DIR}/commons-lang3.jar https://repo1.maven.org/maven2/org/apache/commons/commons-lang3/3.13.0/commons-lang3-3.13.0.jar
                            curl -L -o ${JARS_DIR}/snakeyaml.jar https://repo1.maven.org/maven2/org/yaml/snakeyaml/1.33/snakeyaml-1.33.jar

                            # Jackson Dependencies
                            curl -L -o ${JARS_DIR}/jackson-annotations.jar https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-annotations/2.14.2/jackson-annotations-2.14.2.jar
                            curl -L -o ${JARS_DIR}/jackson-core.jar https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-core/2.14.2/jackson-core-2.14.2.jar
                            curl -L -o ${JARS_DIR}/jackson-databind.jar https://repo1.maven.org/maven2/com/fasterxml/jackson/core/jackson-databind/2.14.2/jackson-databind-2.14.2.jar

                            # OpenCSV
                            curl -L -o ${JARS_DIR}/opencsv.jar https://repo1.maven.org/maven2/com/opencsv/opencsv/5.7.1/opencsv-5.7.1.jar

                            # SLF4J
                            curl -L -o ${JARS_DIR}/slf4j-api.jar https://repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar
                            curl -L -o ${JARS_DIR}/slf4j-simple.jar https://repo1.maven.org/maven2/org/slf4j/slf4j-simple/1.7.36/slf4j-simple-1.7.36.jar

                            echo "✅ All dependencies downloaded"
                        else
                            echo "✅ Dependencies already exist"
                        fi
                        
                        echo "📋 Available JAR files:"
                        ls -la ${JARS_DIR}/
                    '''
                }
            }
        }
        
        stage('Discover Changesets and Count') {
            steps {
                script {
                    echo "🔍 Discovering changesets..."
                    
                    sh '''
                        CHANGESETS_DIR="db/mongodb/dev"
                        
                        if [ ! -d "$CHANGESETS_DIR" ]; then
                            echo "❌ Changesets directory not found: $CHANGESETS_DIR"
                            exit 1
                        fi
                        
                        # Find all XML files
                        XML_FILES=$(find $CHANGESETS_DIR -name "*.xml" -type f 2>/dev/null | sort)
                        
                        if [ -z "$XML_FILES" ]; then
                            echo "❌ No XML changeset files found"
                            exit 1
                        fi
                        
                        echo "✅ Found XML changeset files:"
                        echo "$XML_FILES" | while read -r file; do
                            echo "   📄 $file"
                        done
                        
                        # Get the latest changeset file
                        LATEST_CHANGESET=$(echo "$XML_FILES" | tail -1)
                        echo ""
                        echo "🎯 Using latest changeset: $LATEST_CHANGESET"
                        echo "$LATEST_CHANGESET" > latest_changeset.txt
                        
                        # Count changesets in the file
                        CHANGESET_COUNT=$(grep -c "<changeSet" "$LATEST_CHANGESET" || echo "0")
                        echo "📊 Total changesets in file: $CHANGESET_COUNT"
                        echo "$CHANGESET_COUNT" > changeset_count.txt
                        
                        # Extract database context using sed (more compatible than grep -P)
                        CONTEXT=$(sed -n 's/.*context="\\([^"]*\\)".*/\\1/p' "$LATEST_CHANGESET" | head -n 1)
                        if [ -z "$CONTEXT" ]; then
                            CONTEXT="liquibase_test"
                        fi
                        echo "🎯 Database context: $CONTEXT"
                        echo "$CONTEXT" > database_context.txt
                        
                        # Validate rollback count if rollback action
                        if [ "${LIQUIBASE_ACTION}" = "rollback" ]; then
                            ROLLBACK_COUNT="${ROLLBACK_COUNT}"
                            if [ -z "$ROLLBACK_COUNT" ] || [ "$ROLLBACK_COUNT" -gt "$CHANGESET_COUNT" ]; then
                                echo "❌ Invalid rollback count. Available changesets: $CHANGESET_COUNT"
                                exit 1
                            fi
                            echo "✅ Rollback count $ROLLBACK_COUNT is valid (max: $CHANGESET_COUNT)"
                        fi
                    '''
                }
            }
        }
        
        stage('Execute Liquibase Deployment') {
            steps {
                script {
                    echo "🚀 Executing Liquibase deployment..."
                    
                    sh '''
                        # Read configuration files
                        CHANGESET_FILE=$(cat latest_changeset.txt)
                        CHANGESET_COUNT=$(cat changeset_count.txt)
                        DATABASE_CONTEXT=$(cat database_context.txt)
                        
                        echo "📄 Using changeset: $CHANGESET_FILE"
                        echo "📊 Changeset count: $CHANGESET_COUNT"
                        echo "🎯 Database context: $DATABASE_CONTEXT"
                        echo "🚀 Action: ${LIQUIBASE_ACTION}"
                        
                        # Execute using the shell script
                        chmod +x scripts/liquibase_runner.sh
                        
                        if [ "${LIQUIBASE_ACTION}" = "rollback" ]; then
                            echo "🔄 Executing rollback with count: ${ROLLBACK_COUNT}"
                            ./scripts/liquibase_runner.sh rollback "$DATABASE_CONTEXT" "$CHANGESET_FILE" "${ROLLBACK_COUNT}"
                        else
                            echo "🔄 Executing: ${LIQUIBASE_ACTION}"
                            ./scripts/liquibase_runner.sh "${LIQUIBASE_ACTION}" "$DATABASE_CONTEXT" "$CHANGESET_FILE"
                        fi
                        
                        echo "✅ Liquibase ${LIQUIBASE_ACTION} completed successfully"
                    '''
                }
            }
        }
    }
    
    post {
        success {
            echo "🎉 Deployment completed successfully!"
        }
        
        failure {
            echo "❌ Deployment failed!"
        }
        
        always {
            echo "🧹 Cleaning up..."
            archiveArtifacts artifacts: 'latest_changeset.txt,changeset_count.txt,database_context.txt', allowEmptyArchive: true
        }
    }
}
